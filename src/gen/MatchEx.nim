##
## Entitas Generated Match Extensions for shmupwarz
##
## ** do not edit this file **
##
import bosco/ecs
import ComponentEx
##
## Define a Match for each Component
##
type MatchObj = ref object of RootObj
  matchBounds : Matcher
  matchBullet : Matcher
  matchColorAnimation : Matcher
  matchDestroy : Matcher
  matchEnemy : Matcher
  matchExpires : Matcher
  matchFiring : Matcher
  matchHealth : Matcher
  matchLayer : Matcher
  matchLife : Matcher
  matchMine : Matcher
  matchMouse : Matcher
  matchPlayer : Matcher
  matchPosition : Matcher
  matchResource : Matcher
  matchScaleAnimation : Matcher
  matchScale : Matcher
  matchScore : Matcher
  matchSoundEffect : Matcher
  matchVelocity : Matcher

proc Bounds*(this : MatchObj) : Matcher =
  if this.matchBounds == nil:
    this.matchBounds = MatchAllOf(@[int(Component.Bounds)])
  return this.matchBounds

proc Bullet*(this : MatchObj) : Matcher =
  if this.matchBullet == nil:
    this.matchBullet = MatchAllOf(@[int(Component.Bullet)])
  return this.matchBullet

proc ColorAnimation*(this : MatchObj) : Matcher =
  if this.matchColorAnimation == nil:
    this.matchColorAnimation = MatchAllOf(@[int(Component.ColorAnimation)])
  return this.matchColorAnimation

proc Destroy*(this : MatchObj) : Matcher =
  if this.matchDestroy == nil:
    this.matchDestroy = MatchAllOf(@[int(Component.Destroy)])
  return this.matchDestroy

proc Enemy*(this : MatchObj) : Matcher =
  if this.matchEnemy == nil:
    this.matchEnemy = MatchAllOf(@[int(Component.Enemy)])
  return this.matchEnemy

proc Expires*(this : MatchObj) : Matcher =
  if this.matchExpires == nil:
    this.matchExpires = MatchAllOf(@[int(Component.Expires)])
  return this.matchExpires

proc Firing*(this : MatchObj) : Matcher =
  if this.matchFiring == nil:
    this.matchFiring = MatchAllOf(@[int(Component.Firing)])
  return this.matchFiring

proc Health*(this : MatchObj) : Matcher =
  if this.matchHealth == nil:
    this.matchHealth = MatchAllOf(@[int(Component.Health)])
  return this.matchHealth

proc Layer*(this : MatchObj) : Matcher =
  if this.matchLayer == nil:
    this.matchLayer = MatchAllOf(@[int(Component.Layer)])
  return this.matchLayer

proc Life*(this : MatchObj) : Matcher =
  if this.matchLife == nil:
    this.matchLife = MatchAllOf(@[int(Component.Life)])
  return this.matchLife

proc Mine*(this : MatchObj) : Matcher =
  if this.matchMine == nil:
    this.matchMine = MatchAllOf(@[int(Component.Mine)])
  return this.matchMine

proc Mouse*(this : MatchObj) : Matcher =
  if this.matchMouse == nil:
    this.matchMouse = MatchAllOf(@[int(Component.Mouse)])
  return this.matchMouse

proc Player*(this : MatchObj) : Matcher =
  if this.matchPlayer == nil:
    this.matchPlayer = MatchAllOf(@[int(Component.Player)])
  return this.matchPlayer

proc Position*(this : MatchObj) : Matcher =
  if this.matchPosition == nil:
    this.matchPosition = MatchAllOf(@[int(Component.Position)])
  return this.matchPosition

proc Resource*(this : MatchObj) : Matcher =
  if this.matchResource == nil:
    this.matchResource = MatchAllOf(@[int(Component.Resource)])
  return this.matchResource

proc ScaleAnimation*(this : MatchObj) : Matcher =
  if this.matchScaleAnimation == nil:
    this.matchScaleAnimation = MatchAllOf(@[int(Component.ScaleAnimation)])
  return this.matchScaleAnimation

proc Scale*(this : MatchObj) : Matcher =
  if this.matchScale == nil:
    this.matchScale = MatchAllOf(@[int(Component.Scale)])
  return this.matchScale

proc Score*(this : MatchObj) : Matcher =
  if this.matchScore == nil:
    this.matchScore = MatchAllOf(@[int(Component.Score)])
  return this.matchScore

proc SoundEffect*(this : MatchObj) : Matcher =
  if this.matchSoundEffect == nil:
    this.matchSoundEffect = MatchAllOf(@[int(Component.SoundEffect)])
  return this.matchSoundEffect

proc Velocity*(this : MatchObj) : Matcher =
  if this.matchVelocity == nil:
    this.matchVelocity = MatchAllOf(@[int(Component.Velocity)])
  return this.matchVelocity

var Match* = MatchObj()

