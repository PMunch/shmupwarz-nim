##
## Entitas Generated Components for shmupwarz
##
## ** do not edit this file **
##
import queues
import bosco/ecs
import bosco/Sprite
const POOL_SIZE : int = 128

##
## Define Components
##
type
  Component* {.pure.} = enum
    Bounds
    Bullet
    ColorAnimation
    Destroy
    Enemy
    Expires
    Firing
    Health
    Layer
    Life
    Mine
    Mouse
    Player
    Position
    Resource
    ScaleAnimation
    Scale
    Score
    SoundEffect
    Velocity

  BoundsComponent* = ref object of IComponent
    radius* : float64

  BulletComponent* = ref object of IComponent
    bullet* : bool

  ColorAnimationComponent* = ref object of IComponent
    redMin* : float64
    redMax* : float64
    redSpeed* : float64
    greenMin* : float64
    greenMax* : float64
    greenSpeed* : float64
    blueMin* : float64
    blueMax* : float64
    blueSpeed* : float64
    alphaMin* : float64
    alphaMax* : float64
    alphaSpeed* : float64
    redAnimate* : bool
    greenAnimate* : bool
    blueAnimate* : bool
    alphaAnimate* : bool
    repeat* : bool

  DestroyComponent* = ref object of IComponent
    destroy* : bool

  EnemyComponent* = ref object of IComponent
    enemy* : bool

  ExpiresComponent* = ref object of IComponent
    delay* : float64

  FiringComponent* = ref object of IComponent
    firing* : bool

  HealthComponent* = ref object of IComponent
    health* : float64
    maximumHealth* : float64

  LayerComponent* = ref object of IComponent
    ordinal* : int

  LifeComponent* = ref object of IComponent
    count* : int

  MineComponent* = ref object of IComponent
    mine* : bool

  MouseComponent* = ref object of IComponent
    x* : float64
    y* : float64

  PlayerComponent* = ref object of IComponent
    player* : bool

  PositionComponent* = ref object of IComponent
    x* : float64
    y* : float64

  ResourceComponent* = ref object of IComponent
    path* : string
    sprite* : Sprite
    centered* : bool

  ScaleAnimationComponent* = ref object of IComponent
    min* : float64
    max* : float64
    speed* : float64
    repeat* : bool
    active* : bool

  ScaleComponent* = ref object of IComponent
    x* : float64
    y* : float64

  ScoreComponent* = ref object of IComponent
    value* : float64

  SoundEffectComponent* = ref object of IComponent
    effect* : int

  VelocityComponent* = ref object of IComponent
    x* : float64
    y* : float64


  ##
  ## Component Pool
  ##
  PoolObj = ref object of RootObj
    boundsComponent* : Queue[BoundsComponent]
    bulletComponent* : BulletComponent
    colorAnimationComponent* : Queue[ColorAnimationComponent]
    destroyComponent* : DestroyComponent
    enemyComponent* : EnemyComponent
    expiresComponent* : Queue[ExpiresComponent]
    firingComponent* : FiringComponent
    healthComponent* : Queue[HealthComponent]
    layerComponent* : Queue[LayerComponent]
    lifeComponent* : Queue[LifeComponent]
    mineComponent* : MineComponent
    mouseComponent* : Queue[MouseComponent]
    playerComponent* : PlayerComponent
    positionComponent* : Queue[PositionComponent]
    resourceComponent* : Queue[ResourceComponent]
    scaleAnimationComponent* : Queue[ScaleAnimationComponent]
    scaleComponent* : Queue[ScaleComponent]
    scoreComponent* : Queue[ScoreComponent]
    soundEffectComponent* : Queue[SoundEffectComponent]
    velocityComponent* : Queue[VelocityComponent]

##
## constructor for a new Component Pool
##
proc newPoolObj() : PoolObj =
  new(result)

  result.boundsComponent = initQueue[BoundsComponent]()
  for i in 1..POOL_SIZE:
    result.boundsComponent.add(BoundsComponent())

  result.bulletComponent = BulletComponent()

  result.colorAnimationComponent = initQueue[ColorAnimationComponent]()
  for i in 1..POOL_SIZE:
    result.colorAnimationComponent.add(ColorAnimationComponent())

  result.destroyComponent = DestroyComponent()

  result.enemyComponent = EnemyComponent()

  result.expiresComponent = initQueue[ExpiresComponent]()
  for i in 1..POOL_SIZE:
    result.expiresComponent.add(ExpiresComponent())

  result.firingComponent = FiringComponent()

  result.healthComponent = initQueue[HealthComponent]()
  for i in 1..POOL_SIZE:
    result.healthComponent.add(HealthComponent())

  result.layerComponent = initQueue[LayerComponent]()
  for i in 1..POOL_SIZE:
    result.layerComponent.add(LayerComponent())

  result.lifeComponent = initQueue[LifeComponent]()
  for i in 1..POOL_SIZE:
    result.lifeComponent.add(LifeComponent())

  result.mineComponent = MineComponent()

  result.mouseComponent = initQueue[MouseComponent]()
  for i in 1..POOL_SIZE:
    result.mouseComponent.add(MouseComponent())

  result.playerComponent = PlayerComponent()

  result.positionComponent = initQueue[PositionComponent]()
  for i in 1..POOL_SIZE:
    result.positionComponent.add(PositionComponent())

  result.resourceComponent = initQueue[ResourceComponent]()
  for i in 1..POOL_SIZE:
    result.resourceComponent.add(ResourceComponent())

  result.scaleAnimationComponent = initQueue[ScaleAnimationComponent]()
  for i in 1..POOL_SIZE:
    result.scaleAnimationComponent.add(ScaleAnimationComponent())

  result.scaleComponent = initQueue[ScaleComponent]()
  for i in 1..POOL_SIZE:
    result.scaleComponent.add(ScaleComponent())

  result.scoreComponent = initQueue[ScoreComponent]()
  for i in 1..POOL_SIZE:
    result.scoreComponent.add(ScoreComponent())

  result.soundEffectComponent = initQueue[SoundEffectComponent]()
  for i in 1..POOL_SIZE:
    result.soundEffectComponent.add(SoundEffectComponent())

  result.velocityComponent = initQueue[VelocityComponent]()
  for i in 1..POOL_SIZE:
    result.velocityComponent.add(VelocityComponent())

var Pool* = newPoolObj()

